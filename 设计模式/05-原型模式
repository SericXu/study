## 原型模式

> ####谈原型模式，其实是谈原型范式

原型编程范式的核心思想就是**利用实例来描述对象，用实例作为定义对象和继承的基础**。在 JavaScript 中，原型编程范式的体现就是**基于原型链的继承**。这其中，对原型、原型链的理解是关键。

对象的深拷贝：

- JSON.stringify()

  - 这个方法存在一些局限性，比如无法处理 function、无法处理正则等等——只有当你的对象是一个严格的 JSON 对象时，可以顺利使用这个方法

- **深拷贝没有完美方案，每一种方案都有它的边界 case**。而面试官向你发问也并非是要求你破解人类未解之谜，多数情况下，他只是希望考查你对**递归**的熟练程度。所以递归实现深拷贝的核心思路，大家需要重点掌握（解析在注释里）：

  ```js
  function deepClone(obj) {
      // 如果是 值类型 或 null，则直接return
      if(typeof obj !== 'object' || obj === null) {
          return obj
      }

      // 定义结果对象
      let copy = {}

      // 如果对象是数组，则定义结果数组
      if(obj.constructor === Array) {
          copy = []
      }

      // 遍历对象的key
      for(let key in obj) {
          // 如果key是对象的自有属性
          if(obj.hasOwnProperty(key)) {
              // 递归调用深拷贝方法
              copy[key] = deepClone(obj[key])
          }
      }

      return copy
  }
  ```



### 拓展阅读

深拷贝在命题时，可发挥的空间主要在于针对不同数据结构的处理，比如除了考虑 Array、Object，还需要考虑一些其它的数据结构（Map、Set 等）；此外还有一些极端 case（循环引用等）的处理等等。深拷贝的实现细节，这里为大家推荐两个阅读材料：

- [jQuery中的extend方法源码](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fjquery%2Fjquery%2Fblob%2F1472290917f17af05e98007136096784f9051fab%2Fsrc%2Fcore.js%23L121)
- [深拷贝的终极探索](https://link.juejin.cn/?target=https%3A%2F%2Fsegmentfault.com%2Fa%2F1190000016672263)

----
